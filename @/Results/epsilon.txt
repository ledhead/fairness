Below are the results of comparison between epsilon calculation based on combinations (old approach), and based on knapsack(new approach)
The test was run with the setting prec=2, i.e. with 2 decimal point precision for subset sum.
It seems that the new method is slower for lower k (size), but becomes faster for k > 18.


size 20 run 100... 
runtime_old:
 [0.00023047447204589843, 0.00022016286849975585, 0.0002699899673461914, 0.0003198385238647461, 0.00036007165908813477, 0.00043098926544189454, 0.0004596519470214844, 0.0007350468635559083, 0.001074986457824707, 0.002240440845489502, 0.003629446029663086, 0.006994462013244629, 0.012884693145751953, 0.02786557674407959, 0.05432520627975464, 0.11055450439453125, 0.19223522424697875, 0.40233899116516114, 0.7907830429077148, 1.7011183834075927]
runtime_new:
 [0.00027963876724243166, 0.0007292580604553223, 0.0017991709709167482, 0.003534114360809326, 0.006584477424621582, 0.01040048360824585, 0.013690316677093506, 0.020355987548828124, 0.030620107650756834, 0.04609512805938721, 0.06369431972503663, 0.08601048707962036, 0.10531940937042236, 0.1298726725578308, 0.16371806383132934, 0.2094642162322998, 0.23992547988891602, 0.29581695318222045, 0.34417236328125, 0.4749672746658325]
match ratio:
 [1.0, 1.0, 1.0, 1.0, 1.0, 0.99, 1.0, 1.0, 0.99, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
 
 
size 20 run 100... 
runtime_old:
 [0.00015509605407714843, 0.00018648862838745118, 0.00017523527145385742, 0.00025146484375, 0.0003526926040649414, 0.00034729242324829104, 0.00041533708572387694, 0.0004357790946960449, 0.0007259273529052735, 0.0015324687957763673, 0.0026799440383911133, 0.004372262954711914, 0.008868310451507568, 0.017854676246643067, 0.03582255840301514, 0.06764546871185302, 0.12785555124282838, 0.2633605217933655, 0.487675154209137, 0.9762120890617371]
runtime_new:
 [0.00022542953491210937, 0.0004562449455261231, 0.001115579605102539, 0.002156071662902832, 0.004761161804199218, 0.0069461679458618164, 0.01116002082824707, 0.01683190107345581, 0.023905880451202392, 0.0324446439743042, 0.04198906421661377, 0.056356954574584964, 0.06843268394470214, 0.08824381828308106, 0.10581053972244263, 0.12906717777252197, 0.159964439868927, 0.18786267042160035, 0.21521975040435792, 0.28604244232177733]
match ratio:
 [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.99, 1.0, 1.0, 1.0, 1.0]
 

Newer experiment: knapsack becomes ca 2 times faster at size = 20 with prec_knapsack=1
 
Results for sizes from 17 to 20: 
 
 size 20 run 100... 
runtime_old:
 [0.011817185878753663, 0.02247587442398071, 0.042650065422058105]
runtime_new:
 [0.020953476428985596, 0.025008864402770996, 0.028682866096496583]
match ratio:
 [1.0, 1.0, 1.0]
 
 with real-valued probsame, knapsack version becomes 
 
 prec_knapsack=2 with real-valued probsame becomes 4.45 times faster at size=20
 it is obvious that it scales better than exhaustive
 
size 20 run 10... 
runtime_old:
 [0.00045166015625, 0.0008997678756713867, 0.0005506277084350586, 0.0005489349365234375, 0.0006998777389526367, 0.0009484052658081055, 0.0010996103286743165, 0.0014993906021118163, 0.0027497529983520506, 0.004498696327209473, 0.009199905395507812, 0.01254880428314209, 0.03560035228729248, 0.054548025131225586, 0.11219899654388428, 0.16124937534332276, 0.5967501163482666, 0.6419018268585205, 1.1648611545562744, 2.670198941230774]
runtime_new:
 [0.000548553466796875, 0.0015495538711547852, 0.004250073432922363, 0.010050034523010254, 0.014298653602600098, 0.023501205444335937, 0.02684955596923828, 0.06824991703033448, 0.06690046787261963, 0.08639984130859375, 0.10485069751739502, 0.15424997806549073, 0.24744975566864014, 0.2189997673034668, 0.3025003433227539, 0.3609490394592285, 0.44160573482513427, 0.3909485340118408, 0.5148014068603516, 0.6029528379440308]
match ratio:
 [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]